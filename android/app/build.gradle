apply plugin: "com.android.application"

import com.android.build.OutputFile

//apply plugin: 'io.fabric'
apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

repositories {
    maven { url  "http://jcenter.bintray.com" }
    maven { url 'https://maven.fabric.io/public' }
}

def enableSeparateBuildPerCPUArchitecture = true
def enableProguardInReleaseBuilds = false
def enableProguardInDebugBuilds = false

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        applicationId "foundation.ixo.amply.ecd"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 201
        versionName "2.0.1"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            //storeFile file(AMPLY_ECD_PRODUCTION_KEYSTORE_FILE)
            //storePassword AMPLY_ECD_PRODUCTION_KEYSTORE_PWD
            //keyAlias AMPLY_ECD_PRODUCTION_KEYALIAS
            //keyPassword AMPLY_ECD_PRODUCTION_KEYPWD
        }
        debug {
            storeFile file('ECDRN.keystore')
            storePassword 'shantaram'
            keyAlias 'ECDRN_RELEASE'
            keyPassword 'shantaram'
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            buildConfigField "String", "CODEPUSH_KEY", '"<CODEPUSH_AMPLYECD_PRODUCTION>"'
        }

        releaseStaging {
            initWith(buildTypes.release)
            applicationIdSuffix ".staging"
            buildConfigField "String", "CODEPUSH_KEY", '"<CODEPUSH_AMPLYECD_STAGING>"'
        }

        debug {
            debuggable true
            minifyEnabled enableProguardInDebugBuilds
            buildConfigField "String", "CODEPUSH_KEY", '""'
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-vector-icons')
    compile project(':react-native-navigation')
    compile project(':react-native-google-analytics-bridge')
    compile project(':react-native-code-push')
    compile 'com.android.support:multidex:1.0.1'
    compile "com.facebook.react:react-native:+"
    compile "com.android.support:appcompat-v7:25.3.1"
    compile 'com.madgag.spongycastle:core:1.54.0.0'
    compile 'com.madgag.spongycastle:prov:1.54.0.0'
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
